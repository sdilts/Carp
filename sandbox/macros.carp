(defndynamic reverse-helper [lst accum]
  (if (not (= 0 (length lst)))
    (reverse-helper (cdr lst) (cons (car lst) accum))
    accum))

(defndynamic reverse [lst]
  (reverse-helper lst ()))

(defndynamic my-nth [x lst]
  (if (not (= (length lst) 0))
    (if (= x 0)
      (car lst)
      (my-nth (- x 1) (cdr lst)))
    (macro-error "my-nth: x provided was too big")))

(defndynamic my-nthcdr [x lst]
  (if (not (= (length lst) 0))
    (if (= x 0)
      lst
      (my-nthcdr (- x 1) (cdr lst)))
    (macro-error "my-nthcdr: No list left to cdr")))

(defndynamic plist-get [plist key]
  (if (not (= 0 (length plist)))
    (if (= (car plist) key)
      (car (cdr plist))
      (plist-get (cdr (cdr plist)) key))
    ()))

(defndynamic plist-remove-helper [plist key accum]
  (if (not (= 0 (length plist)))
    (if (= (car plist) key)
      (append (reverse accum) (cdr (cdr plist)))
      (remf-helper (cdr (cdr plist)) key (Dynamic.cons (cadr plist) (cons (car plist) accum))))
    ()))

(defndynamic plist-remove [plist key]
  (remf-helper plist key ()))

(defndynamic plist-set-helper [plist key item accum]
  (if (not (= 0 (length plist)))
    (if (= (car plist) key)
      (append (reverse (cons item (cons key accum))) (cdr (cdr plist)))
      (plist-set-helper (cdr (cdr plist)) key item
                        (Dynamic.cons (cadr plist) (cons (car plist) accum))))
    (reverse (cons item (cons key accum)))))

(defndynamic plist-set [plist key item]
  (plist-set-helper plist key item ()))

(defndynamic make-keyword [thing]
  (if (symbol? thing)
    (Dynamic.Symbol.join [': thing])
    ()))

(defndynamic keywordp [thing]
  (if (symbol? thing)
    (= (Dynamic.String.char-at (str thing) 0) \:)
    false))


(defndynamic build-keyword-list-binding [lambda-list source accum]
  (if (not (= (length lambda-list) 0))
    (let [item (car lambda-list)]
      (if (keywordp item)
        (macro-error "Cannot have multiple keyword designators in the same branch")
        (let [lookup (make-keyword item)]
          (build-keyword-list-binding (cdr lambda-list)
                                 source
                                 (append (list (list 'plist-get source (list 'quote lookup)) item)
                                         accum)))))
    accum))

(defndynamic build-body-list-binding [lambda-list source]
  (list source (car lambda-list)))

(defndynamic build-keyword-binding [lambda-list source]
  (let [item (car lambda-list)]
    (if (= ':rest item)
      (build-body-list-binding (cdr lambda-list) source)
      (if (= ':key item)
        (build-keyword-list-binding (cdr lambda-list) source ())
        (macro-error (Dynamic.String.join ["Macro lambda-list keyword unrecognized " (str item)]))))))

(defndynamic build-let-binding-inner [lambda-list index source accum]
  (if (not (= (length lambda-list) 0))
    (let [item (car lambda-list)]
      (if (list? item)
        (let [nested-loc (gensym-with 'build-let)]
          (append (Dynamic.append (build-let-binding-inner item 0 nested-loc ())
                                  (list (list 'my-nth index source) nested-loc))
                  (build-let-binding-inner (cdr lambda-list) (+ 1 index) source accum)))
        (if (keywordp item)
          (let [nested-loc (gensym-with 'build-keyword)]
            (append (append (build-keyword-binding lambda-list nested-loc)
                            (list (list 'my-nthcdr index source) nested-loc))
                    accum))
          (build-let-binding-inner (cdr lambda-list) (+ 1 index) source (cons (list 'my-nth index source)
                                                                    (cons item accum))))))
    accum))

(defndynamic build-let-binding [lambda-list source]
  (build-let-binding-inner lambda-list 0 source ()))

(defndynamic unwind-let [bindings body]
  (if (not (= (length bindings) 0))
    (let [inital-form (car bindings)
          var-name (my-nth 1 bindings)]
      (unwind-let (cdr (cdr bindings)) (list (append (list 'let (array var-name inital-form))
                                               body))))
    body))

